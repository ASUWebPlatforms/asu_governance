<?php

/**
 * @file
 * Install, update and uninstall functions for the asu_governance module.
 */

use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * @throws \Exception
 */
function asu_governance_install() {
  // Get the username of the uid 1 user.
  $original_superadmin = User::load(1)?->getAccountName();
  // Save the original superadmin username to config for use later.
  \Drupal::configFactory()->getEditable('asu_secure_superadmin.settings')
    ->set('original_superadmin', $original_superadmin)
    ->save();

  try {
    \Drupal::service('asu_secure_superadmin.change_super_admin_service')
      ->changeSuperAdmin();
    \Drupal::messenger()
      ->addMessage('The SuperAdmin account has been secured. If you have been logged out, please log in again.');
  }
  catch (Exception $e) {
    \Drupal::logger('asu_secure_superadmin')->error($e->getMessage());
    \Drupal::messenger()->addError($e->getMessage());
    return;
  }

  // Get the current theme
  $currentTheme = \Drupal::service('theme_handler')->getDefault();
  $config = \Drupal::configFactory()->getEditable('asu_governance.settings');
  $allowableThemes = $config->get('allowable_themes') ?? [];
  if (!in_array($currentTheme, $allowableThemes, TRUE)) {
    $allowableThemes = array_merge($allowableThemes, [$currentTheme]);
    $config->set('allowable_themes', $allowableThemes)->save();
  }

  // Get the module permission loader service.
  $modulePermissionHandler = \Drupal::service('asu_governance.module_permission_handler');

  // Create the Site Builder role if it does not already exist.
  try {
    $modulePermissionHandler->createRole('site_builder', 'Site Builder');
  }
  catch (Exception $e) {
    // Log the error if role creation fails.
    \Drupal::logger('asu_governance')->error('Failed to create Site Builder role: ' . $e->getMessage());
    \Drupal::messenger()->addError(t('Failed to create Site Builder role.'));
    return;
  }

  // Add base permissions to the Site Builder role.
  $modulePermissionHandler->addBasePermissions('site_builder', 'BASE_SB_PERMISSIONS');


  // Create the Content Editor role if it does not already exist.
  try {
    $modulePermissionHandler->createRole('content_editor', 'Content Editor');
  }
  catch (Exception $e) {
    // Log the error if role creation fails.
    \Drupal::logger('asu_governance')->error('Failed to create Content Editor role: ' . $e->getMessage());
    \Drupal::messenger()->addError(t('Failed to create Content Editor role.'));
    return;
  }

  // Add base permissions to the Content Editor role.
  $modulePermissionHandler->addBasePermissions('content_editor', 'BASE_CE_PERMISSIONS');

  // Get the list of allowable modules.
  $allowableModules = \Drupal::config('asu_governance.settings')->get('allowable_modules');
  // Update the Site Builder role's permissions.
  $modulePermissionHandler->addSiteBuilderModulePermissions($allowableModules);
  // Add Site Builder views permissions.
  $modulePermissionHandler->addSiteBuilderViewsPermissions();

  try {
    // Downgrade all users with the 'admin' role to 'site_builder'.
    \Drupal::service('asu_governance.downgrade_admins')->makeSiteBuilders();
  }
  catch (Exception $e) {
    \Drupal::logger('asu_governance')->error($e->getMessage() . PHP_EOL . $e->getTraceAsString());
    \Drupal::messenger()->addError('Could not downgrade administrators' . PHP_EOL . $e->getMessage());
  }

  try {
    // Apply permission blacklist to all roles but 'administrator' and 'site_builder'.
    \Drupal::service('asu_governance.module_permission_handler')->revokeBlacklistedPermissions();
  }
  catch (Exception $e) {
    \Drupal::logger('asu_governance')->error('Could not apply blacklist.' . PHP_EOL . $e->getMessage());
    \Drupal::messenger()->addError('Could not apply blacklist.' . PHP_EOL . $e->getMessage());
    return;
  }

  // Clear caches to ensure all changes are reflected.
  drupal_flush_all_caches();

  // Check if the Purge module is in code.
  $module_list = \Drupal::service('extension.list.module');
  $purgeInCode = $module_list->getPath('purge') !== NULL;

  // Set up purge if in code and not yet enabled.
  if ($purgeInCode && !\Drupal::moduleHandler()->moduleExists('purge')) {
    try {
      __asu_governance_setup_purge();
    } catch (Exception $e) {
      \Drupal::logger('asu_governance')->error('Error setting up Purge: @message', ['@message' => $e->getMessage()]);
      \Drupal::messenger()->addError(t('Error setting up Purge. See logs for details.'));
    }
  }
}

function __asu_governance_setup_purge() {
  // Enable the purge modules.
  $module_installer = \Drupal::service("module_installer");
  $module_list = [
    "purge",
    "purge_ui",
    "purge_drush",
    "purge_queuer_coretags",
    "purge_processor_cron",
    "purge_processor_lateruntime",
    "acquia_purge",
  ];
  foreach ($module_list as $module) {
    if (!\Drupal::moduleHandler()->moduleExists($module)) {
      $module_installer->install([$module]);
    }
  }

  // Clear caches to allow Drupal to find the purgers.
  drupal_flush_all_caches();

  // Set the cache max age to 1 day.
  \Drupal::service('config.factory')->getEditable('system.performance')
    ->set('cache.page.max_age', '86400')
    ->save();

  try {
    // Get the Purge purger service.
    $purge_purgers = \Drupal::service('purge.purgers');

    $plugin_id = 'acquia_purge';
    $enabled = $purge_purgers->getPluginsEnabled();

    // Don't add if it's already there.
    if (!in_array($plugin_id, $enabled)) {
      // Ensure plugin is available.
      if (in_array($plugin_id, $purge_purgers->getPluginsAvailable())) {
        $enabled[$purge_purgers->createId()] = $plugin_id;
        $purge_purgers->setPluginsEnabled($enabled);
      }
    }
  } catch (\Exception $e) {
    \Drupal::logger('asu_governance')->error('Error enabling Acquia Purge plugin: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Update configs and add Content Editor role.
 */
function asu_governance_update_10000() {
  // Get the extension list service.
  $module_extension_list = \Drupal::service('extension.list.module');
  $path = $module_extension_list->getPath('asu_governance') . '/config/install/asu_governance.settings.yml';
  $yaml_data = Yaml::parse(file_get_contents($path));
  $blacklist = $yaml_data['permissions_blacklist'];

  // Update the active configuration to include the base blacklist.
  $config = \Drupal::configFactory()->getEditable('asu_governance.settings');
  $config->set('permissions_blacklist', $blacklist);
  $config->save();

  // Get the module permission handler service.
  $modulePermissionHandler = \Drupal::service('asu_governance.module_permission_handler');
  $roles = Role::loadMultiple();
  if (!in_array('content_editor', array_keys($roles), TRUE)) {
    // Create the Content Editor role if it does not already exist.
    try {
      $modulePermissionHandler->createRole('content_editor', 'Content Editor');
    }
    catch (Exception $e) {
      // Log the error if role creation fails.
      \Drupal::logger('asu_governance')->error('Failed to create Content Editor role: ' . $e->getMessage());
      \Drupal::messenger()->addError(t('Failed to create Content Editor role.'));
      return;
    }

    // Add base permissions to the Site Builder role.
    $modulePermissionHandler->addBasePermissions('content_editor', 'BASE_CE_PERMISSIONS');
  }

}

/**
 * Update allowable modules and permissions.
 */
function asu_governance_update_10001() {

  $newModules = [
    'asset_injector',
    'siteimprove',
    'masquerade',
    'smtp',
    'metatag_verification',
    'feeds',
    'better_exposed_filters',
    'mailsystem',
    'views_data_export',
    'feeds_tamper',
    'metatag_open_graph',
    'honeypot',
    'views_bulk_operations',
    'metatag_views',
  ];

  $newPermissions = [
    'switch users',
  ];

  $config = \Drupal::service('config.factory')->getEditable('asu_governance.settings');

  $moduleList = $config->get('allowable_modules', []);
  foreach ($newModules as $module) {
    if (!in_array($module, $moduleList, TRUE)) {
      $moduleList[] = $module;
    }
  }
  $config->set('allowable_modules', $moduleList);

  $permissionsBlacklist = $config->get('permissions_blacklist', []);
  if (!in_array('switch users', $permissionsBlacklist, TRUE)) {
    $permissionsBlacklist[] = 'switch users';
    $config->set('permissions_blacklist', $permissionsBlacklist);
  }

  $config->save();

}
